{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","contants/weathers.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","components/LocationList.js","services/transformWeather.js","services/transformForecast.js","actions/index.js","reducers/cities.js","reducers/index.js","reducers/city.js","containers/LocationListContainer.js","components/ForecastItem/index.js","components/ForecastExtended.js","containers/ForecastExtendedContainer.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["Location","_ref","city","react_default","a","createElement","className","WeatherExtraInfo","humidity","wind","concat","icons","_icons","Object","defineProperty","WeatherTermperature","temperature","weatherState","icon","lib_default","name","size","getWeatherIcon","WeatherData","_ref$data","data","WeatherTemperature","WeatherData_WeatherExtraInfo","WeatherLocation","onWeatherLocationClick","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress_default","LocationList","cities","onSelectedLocation","map","components_WeatherLocation","key","console","log","handleWeatherLocationClick","strToComponents","transformWeather","weather_data","kelvin","_weather_data$main","main","temp","speed","weather","id","getWeatherState","Number","convert","from","to","toFixed","transformForecast","list","filter","item","moment","unix","dt","utc","hour","weekDay","format","SET_CITY","SET_FORECAST_DATA","GET_WEATHER_CITY","SET_WEATHER_CITY","api_key","setSelectedCity","payload","dispatch","getState","url_forecast","type","setCity","state","date","forecastDataDate","now","Date","fetch","then","json","forecastData","setForecastData","setWeather","forEach","api_weather","getForecastDataFromCities","createSelector","getWeatherCities","toPairs","_ref2","slicedToArray","combineReducers","arguments","length","undefined","action","_action$payload","objectSpread","_action$payload2","getCity","_getForecastDataFromCities","_getWeatherCities","LocationListContainer","handleSelectedLocation","_this","props","_this$props","this","components_LocationList","citiesWeather","Component","connect","bindActionCreators","actions","ForeCastItem","ForecastExtended","forecast","ForecastItem","renderForecastItemDays","proptypes","PropTypes","string","isRequired","array","ForecastExtendedContainer","components_ForecastExtended","App","react_flexbox_grid_lib","AppBar_default","position","Toolbar_default","Typography_default","variant","color","xs","md","containers_LocationListContainer","Paper_default","elevation","containers_ForecastExtendedContainer","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c92ea83.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './styles.css'\n\nconst Location = ({ city }) => {\n  return (\n    <div className=\"locationCont\">\n      <h1>{city}</h1>\n    </div>\n  );\n};\n\nLocation.propTypes = {\n  city: PropTypes.string.isRequired,\n}\n\nexport default Location;\n","import React from 'react'\nimport PropTypes from \"prop-types\";\nimport \"./styles.css\";\n\nconst WeatherExtraInfo = ({humidity, wind}) => (\n  <div className=\"weatherExtraInfoCont\">\n    <span className=\"extraInfoText\">{`Humedad: ${humidity}%`}</span>\n    <span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\n  </div>\n)\n\nWeatherExtraInfo.propTypes = {\n  humidity: PropTypes.number.isRequired,\n  wind: PropTypes.string.isRequired\n}\n\nexport default WeatherExtraInfo","import React from \"react\";\nimport WeatherIcons from \"react-weathericons\";\nimport PropTypes from \"prop-types\";\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from \"./../../../contants/weathers\";\nimport \"./styles.css\";\n\nconst icons = {\n  [CLOUD]: 'cloud',\n  [SUN]: 'day-sunny',\n  [RAIN]: 'rain',\n  [SNOW]: 'snow',\n  [THUNDER]: 'day-thunderstorm',\n  [DRIZZLE]: 'day-showers'\n};\n\nconst getWeatherIcon = weatherState => {\n  const icon = icons[weatherState]\n  const sizeIcon = \"4x\";\n  if (icon) {    \n    return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\n  } else {\n    return <WeatherIcons className=\"wicon\" name={\"day-sunny\"} size={sizeIcon} />;\n  }\n};\n\nconst WeatherTermperature = ({ temperature, weatherState }) => (\n  <div className=\"weatherTemperatureCont\">\n    {getWeatherIcon(weatherState)}\n    <span className=\"temperature\">{`${temperature}`}</span>\n    <span className=\"temperatureType\">{`Cª`}</span>\n  </div>\n);\n\nWeatherTermperature.propTypes = {\n  temperature: PropTypes.number.isRequired,\n  weatherState: PropTypes.string.isRequired\n}\n\nexport default WeatherTermperature;\n","export const CLOUD = 'clud'\n\nexport const SUN = 'sun'\n\nexport const RAIN = 'rain'\n\nexport const SNOW = 'snow'\n\nexport const THUNDER = 'thunder'\n\nexport const DRIZZLE = 'drizzle'","import React from \"react\";\nimport WeatherExtraInfo from \"./WeatherExtraInfo\";\nimport WeatherTemperature from \"./WeatherTemperature\";\nimport \"./styles.css\";\nimport PropTypes from \"prop-types\";\n\nconst WeatherData = ({\n  data: { temperature, weatherState, humidity, wind }\n}) => (\n  <div className=\"weatherDataCont\">\n    <WeatherTemperature temperature={temperature} weatherState={weatherState} />\n    <WeatherExtraInfo humidity={humidity} wind={wind} />\n  </div>\n);\n\nWeatherData.propTypes = {\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired\n  })\n};\n\nexport default WeatherData;\n","import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { PropTypes } from 'prop-types'\nimport Location from './Location'\nimport WeatherData from './WeatherData'\nimport './styles.css'\n\nconst WeatherLocation = ({ onWeatherLocationClick, city, data }) => (\n  <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick}>\n    <Location city={city} />\n    {data ? <WeatherData data={data} /> : <CircularProgress size={50} />}\n  </div>\n)\n\nWeatherLocation.propTypes = {\n  city: PropTypes.string.isRequired,\n  onWeatherLocationClick: PropTypes.func,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired\n  })\n}\n\nexport default WeatherLocation\n","import React from 'react'\nimport WeatherLocation from './WeatherLocation'\nimport PropTypes from 'prop-types'\nimport './styles.css'\n\nconst LocationList = ({ cities, onSelectedLocation }) => {\n  const handleWeatherLocationClick = city => {\n    console.log('handleWeatherLocationClick')\n    onSelectedLocation(city)\n  }\n  const strToComponents = cities =>\n    cities.map(city => (\n      <WeatherLocation\n        key={city.key}\n        city={city.name}\n        onWeatherLocationClick={() => handleWeatherLocationClick(city.name)}\n        data={city.data}\n      />\n    ))\n  return <div className=\"locationList\">{strToComponents(cities)}</div>\n}\n\nLocationList.propTypes = {\n  cities: PropTypes.array.isRequired,\n  onSelectedLocation: PropTypes.func\n}\n\nexport default LocationList\n","import convert from 'convert-units'\nimport {\n  SUN,\n  CLOUD,\n  RAIN,\n  SNOW,\n  THUNDER,\n  DRIZZLE\n} from './../contants/weathers'\n\nconst getTemp = kelvin => {\n  return Number(\n    convert(kelvin)\n      .from('K')\n      .to('C')\n      .toFixed(0)\n  )\n}\n\nconst getWeatherState = weather => {\n  const { id } = weather\n  if (id < 300) {\n    return THUNDER\n  } else if (id < 400) {\n    return DRIZZLE\n  } else if (id < 600) {\n    return RAIN\n  } else if (id < 700) {\n    return SNOW\n  } else if (id === 800) {\n    return SUN\n  } else {\n    return CLOUD\n  }\n}\n\nconst transformWeather = weather_data => {\n  const { humidity, temp } = weather_data.main\n  const { speed } = weather_data.wind\n  const weatherState = getWeatherState(weather_data.weather[0])\n  const temperature = getTemp(temp)\n  const data = {\n    humidity,\n    temperature,\n    weatherState,\n    wind: `${speed} m/s`\n  }\n\n  return data\n}\n\nexport default transformWeather\n","import moment from 'moment'\nimport 'moment/locale/es'\nimport transformWeather from './transformWeather'\n\nconst transformForecast = (data) => (\n  data.list.filter(item => (\n    moment.unix(item.dt).utc().hour() === 6 ||\n    moment.unix(item.dt).utc().hour() === 12 ||\n    moment.unix(item.dt).utc().hour() === 18\n  )).map(item => (\n    {\n      weekDay: moment.unix(item.dt).format('ddd'),\n      hour: moment.unix(item.dt).hour(),\n      data: transformWeather(item)\n    }\n  ))\n)\n\nexport default transformForecast","import transformForecast from './../services/transformForecast'\nimport transformWeather from '../services/transformWeather'\n\nexport const SET_CITY = 'SET_CITY'\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA'\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY'\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY'\n\nconst setCity = payload => ({ type: SET_CITY, payload })\nconst setForecastData = payload => ({ type: SET_FORECAST_DATA, payload })\n\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload })\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload })\n\nconst api_key = '76ff146f7db30c279ba914a50a7ab1b8'\nconst url = 'http://api.openweathermap.org/data/2.5/forecast'\nconst url_weather = 'http://api.openweathermap.org/data/2.5/weather'\n\nexport const setSelectedCity = payload => {\n  return (dispatch, getState) => {\n    const url_forecast = `${url}?q=${payload}&appid=${api_key}`\n\n    // Activar en el estado un indicador de busqueda de datos\n    dispatch(setCity(payload))\n\n    const state = getState()\n    const date = state.cities[payload] && state.cities[payload].forecastDataDate\n\n    const now = new Date()\n\n    if (date && (now - date) < 1 * 60 * 1000) {\n      return\n    }\n\n    return fetch(url_forecast)\n      .then(data => data.json())\n      .then(weather_data => {\n        const forecastData = transformForecast(weather_data)\n        console.log(forecastData)\n        // Mddificar el estado con el resultado de la promesa(fetch)\n        dispatch(setForecastData({ city: payload, forecastData }))\n      })\n  }\n}\n\nexport const setWeather = payload => {\n  return dispatch => {\n    payload.forEach(city => {\n      dispatch(getWeatherCity(city))\n      const api_weather = `${url_weather}?q=${city}&appid=${api_key}`\n      fetch(api_weather)\n        .then(data => {\n          return data.json()\n        })\n        .then(weather_data => {\n          const weather = transformWeather(weather_data)\n          dispatch(setWeatherCity({ city, weather }))\n        })\n    })\n  }\n}\n","import { createSelector } from 'reselect'\nimport toPairs from 'lodash.topairs'\nimport {\n  SET_FORECAST_DATA,\n  GET_WEATHER_CITY,\n  SET_WEATHER_CITY\n} from './../actions'\n\nexport const cities = (state = {}, action) => {\n  switch (action.type) {\n    case SET_FORECAST_DATA: {\n      const { city, forecastData } = action.payload\n      return { ...state, [city]: { ...state[city], forecastData, forecastDataDate: new Date() } }\n    }\n    case GET_WEATHER_CITY: {\n      const city = action.payload\n      return { ...state, [city]: { ...state[city], weather: null } }\n    }\n    case SET_WEATHER_CITY: {\n      const { city, weather } = action.payload\n      return { ...state, [city]: { ...state[city], weather } }\n    }\n    default:\n      return state\n  }\n}\n\nexport const getForecastDataFromCities = createSelector(\n  (state, city) => state[city] && state[city].forecastData,\n  forecastData => forecastData\n)\n\nconst fromObjToArray = cities =>\n  toPairs(cities).map(([key, value]) => ({\n    key,\n    name: key,\n    data: value.weather\n  }))\n\nexport const getWeatherCities = createSelector(\n  state => fromObjToArray(state),\n  cities => cities\n)\n","import { combineReducers } from 'redux'\nimport { createSelector } from 'reselect'\nimport {\n  cities,\n  getForecastDataFromCities as _getForecastDataFromCities,\n  getWeatherCities as _getWeatherCities\n} from './cities'\nimport { city } from './city'\n\nexport default combineReducers({\n  cities,\n  city\n})\n\nexport const getCity = createSelector(\n  state => state.city,\n  city => city\n)\n\nexport const getForecastDataFromCities = createSelector(\n  state => state.cities,\n  getCity,\n  _getForecastDataFromCities\n)\n\nexport const getWeatherCities = createSelector(\n  state => state.cities,\n  _getWeatherCities\n)\n","import { SET_CITY } from './../actions'\n\nexport const city = (state = {}, action) => {\n  switch (action.type) {\n    case SET_CITY:\n      return action.payload\n    default:\n      return state\n  }\n}\n","import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport PropTypes from 'prop-types'\nimport LocationList from './../components/LocationList'\nimport { connect } from 'react-redux'\nimport * as actions from './../actions'\nimport { getWeatherCities, getCity } from '../reducers'\n\nclass LocationListContainer extends Component {\n  componentDidMount() {\n    const { setWeather, setSelectedCity, cities, city } = this.props\n    setWeather(cities)\n    setSelectedCity(city)\n  }\n\n  handleSelectedLocation = city => {\n    this.props.setSelectedCity(city)\n  }\n\n  render() {\n    return (\n      <LocationList\n        cities={this.props.citiesWeather}\n        onSelectedLocation={this.handleSelectedLocation}\n      />\n    )\n  }\n}\n\nLocationListContainer.propTypes = {\n  setSelectedCity: PropTypes.func.isRequired,\n  setWeather: PropTypes.func.isRequired,\n  cities: PropTypes.array.isRequired,\n  citiesWeather: PropTypes.array,\n  city: PropTypes.string.isRequired\n}\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch)\n\n// const mapDispatchToProps = dispatch => ({\n//   setCity: value => dispatch(setSelectedCity(value)),\n//   setWeather: cities => dispatch(setWeather(cities))\n// })\n\nconst mapStateToProps = state => ({\n  citiesWeather: getWeatherCities(state),\n  city: getCity(state)\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LocationListContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport WeatherData from './../WeatherLocation/WeatherData'\n\nconst ForeCastItem = ({ weekDay, hour, data }) => (\n  <div>\n    <h2>\n      {weekDay} - {hour} hs\n    </h2>\n    <WeatherData data={data} />\n  </div>\n)\n\nForeCastItem.propTypes = {\n  weekDay: PropTypes.string.isRequired,\n  hour: PropTypes.number.isRequired,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired\n  })\n}\n\nexport default ForeCastItem\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ForeCastItem from './ForecastItem'\nimport './styles.css'\n\nconst renderForecastItemDays = forecastData => {\n  return forecastData.map(forecast => (\n    <ForeCastItem\n      key={`${forecast.weekDay}${forecast.hour}`}\n      weekDay={forecast.weekDay}\n      hour={forecast.hour}\n      data={forecast.data}\n    />\n  ))\n}\nconst renderProgress = () => {\n  return <h3>Cargando Pronóstico extendido...</h3>\n}\n\nconst ForecastExtended = ({ city, forecastData }) => (\n  <div>\n    <h2 className=\"forecast-title\">Pronóstico extendido para {city}</h2>\n    {forecastData ? renderForecastItemDays(forecastData) : renderProgress()}\n  </div>\n)\n\nForecastExtended.proptypes = {\n  city: PropTypes.string.isRequired,\n  forecastData: PropTypes.array,\n}\n\nexport default ForecastExtended\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport ForeCastExtended from './../components/ForecastExtended'\nimport { getForecastDataFromCities, getCity } from '../reducers'\n\nclass ForecastExtendedContainer extends Component {\n  render() {\n    const { city, forecastData } = this.props\n    return city && <ForeCastExtended city={city} forecastData={forecastData} />\n  }\n}\n\nForecastExtendedContainer.propTypes = {\n  city: PropTypes.string.isRequired,\n  forecastData: PropTypes.array\n}\n\nconst mapStateToProps = state => ({\n  city: getCity(state),\n  forecastData: getForecastDataFromCities(state)\n})\nexport default connect(\n  mapStateToProps,\n  null\n)(ForecastExtendedContainer)\n","import React, { Component } from 'react'\nimport './App.css'\nimport LocationListContainer from './containers/LocationListContainer'\nimport Paper from '@material-ui/core/Paper'\nimport AppBar from '@material-ui/core/AppBar'\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { Grid, Row, Col } from 'react-flexbox-grid'\nimport ForecastExtendedContainer from './containers/ForecastExtendedContainer'\n\nconst cities = [\n  'Bogota,co',\n  'Buenos Aires,ar',\n  'Ciudad de méxico,mx',\n  'Washington,us',\n  'Madrid,es',\n  'Lima,pe'\n]\n\nclass App extends Component {\n  render() {\n    return (\n      <Grid>\n        <Row>\n          <AppBar position=\"sticky\">\n            <Toolbar>\n              <Typography variant=\"title\" color=\"inherit\">\n                Weather App\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </Row>\n        <Row>\n          <Col xs={12} md={6}>\n            <LocationListContainer cities={cities} />\n          </Col>\n          <Col xs={12} md={6}>\n            <Paper elevation={4}>\n              <div className=\"details\">\n                <ForecastExtendedContainer />\n              </div>\n            </Paper>\n          </Col>\n        </Row>\n      </Grid>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport reducers from './../reducers'\n\nconst initialState = {\n  city: 'Bogota,co'\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport const store = createStore(\n  reducers,\n  initialState,\n  composeEnhancers(applyMiddleware(thunk))\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { store } from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}